{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BC Terrain Classification System string parser (for the 1997 BCTCS System) \u00b6 The BC Terrain Classification System (BCTCS) is a scheme designed for the classification of surficial materials, landforms and geomorphological processes of a mappable area. The latest version of the classification is fully described here: https://www2.gov.bc.ca/assets/gov/environment/natural-resource-stewardship/nr-laws-policy/risc/terclass_system_1997.pdf (1997). This python script takes as input a single string of alphanumeric characters which represent the characteristics of terrain encoded by the classification system and returns a list (or lists) containing plain english language descriptions of the terrain, returned as a string, list or dictionary. With this script you can: Get the English-language description of a BCTCS code Get a list of properties of a BCTCS code (i.e., its surface material, surface expression, texture, Geomorphological proccesses, extent) Get those same properties above, but in a dictionary format. If the code is composite (i.e., contains more than one terrain type) you can get the amount of terrain types in the code, or first type, or last type. Quick install \u00b6 pip install bctcs_terrain_parser Documentation and API reference \u00b6 User-friendly documentation is available at https:// . This includes complete descriptions of all console utilities and a complete API reference. Source code \u00b6 The primary repository for this software is at https://github.com/peatrc/bc_terrain_parser . More information is available at the API reference .","title":"Overview"},{"location":"#bc-terrain-classification-system-string-parser-for-the-1997-bctcs-system","text":"The BC Terrain Classification System (BCTCS) is a scheme designed for the classification of surficial materials, landforms and geomorphological processes of a mappable area. The latest version of the classification is fully described here: https://www2.gov.bc.ca/assets/gov/environment/natural-resource-stewardship/nr-laws-policy/risc/terclass_system_1997.pdf (1997). This python script takes as input a single string of alphanumeric characters which represent the characteristics of terrain encoded by the classification system and returns a list (or lists) containing plain english language descriptions of the terrain, returned as a string, list or dictionary. With this script you can: Get the English-language description of a BCTCS code Get a list of properties of a BCTCS code (i.e., its surface material, surface expression, texture, Geomorphological proccesses, extent) Get those same properties above, but in a dictionary format. If the code is composite (i.e., contains more than one terrain type) you can get the amount of terrain types in the code, or first type, or last type.","title":"BC Terrain Classification System string parser (for the 1997 BCTCS System)"},{"location":"#quick-install","text":"pip install bctcs_terrain_parser","title":"Quick install"},{"location":"#documentation-and-api-reference","text":"User-friendly documentation is available at https:// . This includes complete descriptions of all console utilities and a complete API reference.","title":"Documentation and API reference"},{"location":"#source-code","text":"The primary repository for this software is at https://github.com/peatrc/bc_terrain_parser . More information is available at the API reference .","title":"Source code"},{"location":"LICENSE/","text":"The MIT License (MIT) Copyright \u00a9 2023 University of British Columbia Library Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE","title":"License"},{"location":"api_ref/","text":"API Reference for Terrain class \u00b6 Terrain(BCTCS_terrain_code, strictmode) \u00b6 param BCTCS terrain_code : str \u00b6 BC Terrain Classification string, (codified from the standards given in the BC Terrain Classification System ) param strictmode : int (default = 1) \u00b6 Boolean indicating strict mode on/off. Default = 1. Passing a 0 will let the parser return a string result to the best of its ability, and also make note of the unparsable characters but not fail. Examples: >>> terrain = Terrain('Rha') >>> print(type(terrain)) <class '__main__.Terrain'> Printing a Terrain object will return a string of the parsed BCTCS terrain code >>> print(terrain) Bedrock (Activity status n/a) hummock(s) Moderate slope continuous Terrain().parsed \u00b6 .parsed is a @property of a Terrain object Given a terrain object, .parsed returns a list of lists where each element contains eight sub elements representing [\u2018Surficial Material\u2019, \u2018Surface Expression\u2019, \u2018Texture\u2019, \u2018Geomorphological Proccess(es)\u2019, \u2018Extent\u2019, \u2018Coverage Relative to next Terrain Type\u2019, \u2018Unparsed Terms\u2019, \u2018BCTCS code fragment that was parsed\u2019] >>> Terrain('Mbv').parsed [['Morainal Material(Till) (Inactive)', 'blanket veneer', '', '', 'continuous', '', '', 'Mbv']] >>> Terrain('Mbv/Cv-VRAsd').parsed [['Morainal Material(Till) (Inactive)', 'blanket veneer', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Mbv/'], ['Colluvium (Active)', 'veneer steep slope depression(s)', '', 'Gully erosion (Active) Rapid mass movements (Active) Snow avalanches (Active) s* ', 'continuous', '', '', 'Cv-VRAsd']] NB: coverage_relative_to_next_terrain_type will only exist if the terrain code is a composite describing multiple terrain types, otherwise it will return empty. str (): \u00b6 Returns one string of the descriptors of all terrain types of the given terrain code. If there are multiple types of terrain in the code (i.e., it is a composite code) then the descriptors for each terrain type are separated by a \u2018 / \u2018. >>> str(Terrain('Mbv')) 'Morainal Material(Till) (Inactive) blanket veneer continuous' >>> str(Terrain('Us-V/Rs')) 'Undifferentiated Materials (Activity status n/a) steep slope Gully erosion (Active) continuous greater extent relative to next terrain type / Bedrock (Activity status n/a) steep slope continuous' json(): \u00b6 Terrain code attributes returned as a dictionary with keys: surficial_material, surface_expression, texture, geomorphological processes extent, coverage_relative_to_next_terrain_type If the terrain code does not specify any of the terms, its value will be empty. NB: coverage_relative_to_next_terrain_type will only exist if the terrain code is a composite describing multiple terrain types, otherwise it will return empty. >>> Terrain('Rha').json() {'Rha': [{'surficial_material': 'Bedrock (Activity status n/a)', 'surface_expression': 'hummock(s) Moderate slope', 'texture': None, 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': None}]} >>> Terrain('rCa/Rs').json() {'rCa/Rs': [{'surficial_material': 'Colluvium (Active)', 'surface_expression': 'Moderate slope', 'texture': 'Rubble', 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': 'greater extent relative to next terrain type'}, {'surficial_material': 'Bedrock (Activity status n/a)', 'surface_expression': 'steep slope', 'texture': None, 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': None}]} len (): \u00b6 Returns the amount of terrain types in the given terrain code >>> len(Terrain('Rha')) 1 >>> len(Terrain('Rha/aCk')) 2 getitem (key): \u00b6 Returns only the discriptors of the terrain type given in the key e.g., if the key is 0 the first terrain type is returned if the key is 1 the second terrain type is returned if the key is n, the n+1 terrain type is returned >>> Terrain('Rha/aCk')[0] ['Bedrock (Activity status n/a)', 'hummock(s) Moderate slope', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Rha/'] >>> Terrain('Rha/aCk')[1] ['Colluvium (Active)', 'moderately steep slope', 'Blocks', '', 'continuous', '', '', 'aCk'] int (): \u00b6 Returns the amount of terrain types in the given terrain code >>> print(len(Terrain('Rha'))) 1 >>> print(len(Terrain('Rha/aCk'))) 2 max(): \u00b6 Returns the list of descriptors of the last terrain type of the given terrain code >>> max(Terrain('Rha/aCk')) ['Colluvium (Active)', 'moderately steep slope', 'Blocks', '', 'continuous', '', '', 'aCk'] min(): \u00b6 Returns the list of descriptors of the first terrain type of the given terrain code >>> min(Terrain('Rha/aCk')) ['Bedrock (Activity status n/a)', 'hummock(s) Moderate slope', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Rha/']","title":"API reference"},{"location":"api_ref/#api-reference-for-terrain-class","text":"","title":"API Reference for Terrain class"},{"location":"api_ref/#terrainbctcs_terrain_code-strictmode","text":"","title":"Terrain(BCTCS_terrain_code, strictmode)"},{"location":"api_ref/#param-bctcs-terrain_code-str","text":"BC Terrain Classification string, (codified from the standards given in the BC Terrain Classification System )","title":"param BCTCS terrain_code : str"},{"location":"api_ref/#param-strictmode-int-default-1","text":"Boolean indicating strict mode on/off. Default = 1. Passing a 0 will let the parser return a string result to the best of its ability, and also make note of the unparsable characters but not fail. Examples: >>> terrain = Terrain('Rha') >>> print(type(terrain)) <class '__main__.Terrain'> Printing a Terrain object will return a string of the parsed BCTCS terrain code >>> print(terrain) Bedrock (Activity status n/a) hummock(s) Moderate slope continuous","title":"param strictmode : int (default = 1)"},{"location":"api_ref/#terrainparsed","text":".parsed is a @property of a Terrain object Given a terrain object, .parsed returns a list of lists where each element contains eight sub elements representing [\u2018Surficial Material\u2019, \u2018Surface Expression\u2019, \u2018Texture\u2019, \u2018Geomorphological Proccess(es)\u2019, \u2018Extent\u2019, \u2018Coverage Relative to next Terrain Type\u2019, \u2018Unparsed Terms\u2019, \u2018BCTCS code fragment that was parsed\u2019] >>> Terrain('Mbv').parsed [['Morainal Material(Till) (Inactive)', 'blanket veneer', '', '', 'continuous', '', '', 'Mbv']] >>> Terrain('Mbv/Cv-VRAsd').parsed [['Morainal Material(Till) (Inactive)', 'blanket veneer', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Mbv/'], ['Colluvium (Active)', 'veneer steep slope depression(s)', '', 'Gully erosion (Active) Rapid mass movements (Active) Snow avalanches (Active) s* ', 'continuous', '', '', 'Cv-VRAsd']] NB: coverage_relative_to_next_terrain_type will only exist if the terrain code is a composite describing multiple terrain types, otherwise it will return empty.","title":"Terrain().parsed"},{"location":"api_ref/#str","text":"Returns one string of the descriptors of all terrain types of the given terrain code. If there are multiple types of terrain in the code (i.e., it is a composite code) then the descriptors for each terrain type are separated by a \u2018 / \u2018. >>> str(Terrain('Mbv')) 'Morainal Material(Till) (Inactive) blanket veneer continuous' >>> str(Terrain('Us-V/Rs')) 'Undifferentiated Materials (Activity status n/a) steep slope Gully erosion (Active) continuous greater extent relative to next terrain type / Bedrock (Activity status n/a) steep slope continuous'","title":"str():"},{"location":"api_ref/#json","text":"Terrain code attributes returned as a dictionary with keys: surficial_material, surface_expression, texture, geomorphological processes extent, coverage_relative_to_next_terrain_type If the terrain code does not specify any of the terms, its value will be empty. NB: coverage_relative_to_next_terrain_type will only exist if the terrain code is a composite describing multiple terrain types, otherwise it will return empty. >>> Terrain('Rha').json() {'Rha': [{'surficial_material': 'Bedrock (Activity status n/a)', 'surface_expression': 'hummock(s) Moderate slope', 'texture': None, 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': None}]} >>> Terrain('rCa/Rs').json() {'rCa/Rs': [{'surficial_material': 'Colluvium (Active)', 'surface_expression': 'Moderate slope', 'texture': 'Rubble', 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': 'greater extent relative to next terrain type'}, {'surficial_material': 'Bedrock (Activity status n/a)', 'surface_expression': 'steep slope', 'texture': None, 'geomorphological_processes': None, 'extent': 'continuous', 'coverage_relative_to_next_terrain_type': None}]}","title":"json():"},{"location":"api_ref/#len","text":"Returns the amount of terrain types in the given terrain code >>> len(Terrain('Rha')) 1 >>> len(Terrain('Rha/aCk')) 2","title":"len():"},{"location":"api_ref/#getitemkey","text":"Returns only the discriptors of the terrain type given in the key e.g., if the key is 0 the first terrain type is returned if the key is 1 the second terrain type is returned if the key is n, the n+1 terrain type is returned >>> Terrain('Rha/aCk')[0] ['Bedrock (Activity status n/a)', 'hummock(s) Moderate slope', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Rha/'] >>> Terrain('Rha/aCk')[1] ['Colluvium (Active)', 'moderately steep slope', 'Blocks', '', 'continuous', '', '', 'aCk']","title":"getitem(key):"},{"location":"api_ref/#int","text":"Returns the amount of terrain types in the given terrain code >>> print(len(Terrain('Rha'))) 1 >>> print(len(Terrain('Rha/aCk'))) 2","title":"int():"},{"location":"api_ref/#max","text":"Returns the list of descriptors of the last terrain type of the given terrain code >>> max(Terrain('Rha/aCk')) ['Colluvium (Active)', 'moderately steep slope', 'Blocks', '', 'continuous', '', '', 'aCk']","title":"max():"},{"location":"api_ref/#min","text":"Returns the list of descriptors of the first terrain type of the given terrain code >>> min(Terrain('Rha/aCk')) ['Bedrock (Activity status n/a)', 'hummock(s) Moderate slope', '', '', 'continuous', 'greater extent relative to next terrain type', '', 'Rha/']","title":"min():"},{"location":"credits/","text":"Credits \u00b6 bctcs_terrain_parser written by Peter Carvalho With guidance and support from Paul Lesack and Evan Thonberry . This is a product of the University of British Columbia Library Research Commons .","title":"Credits"},{"location":"credits/#credits","text":"bctcs_terrain_parser written by Peter Carvalho With guidance and support from Paul Lesack and Evan Thonberry . This is a product of the University of British Columbia Library Research Commons .","title":"Credits"}]}